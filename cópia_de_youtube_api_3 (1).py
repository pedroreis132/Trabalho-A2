# -*- coding: utf-8 -*-
"""Cópia de Youtube API 3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xewMB0TJBsVEyyfc_9bY64-V6NxBFkFu
"""




# Documentação Primária

# https://developers.google.com/youtube/v3/docs/search?hl=pt-br
#
# Limites da API
# https://developers.google.com/youtube/v3/guides/quota_and_compliance_audits?hl=pt-br

# Outras documentações úteis
# Exemplo de carga por canal: https://github.com/Jeel-Kenia/Youtube-Data-Scrapping/blob/main/youtube.py

# Como fazer a conexão
from googleapiclient.discovery import build

# Insira sua chave da API do YouTube aqui
from google.colab import userdata
api_key = userdata.get('YOUTUBE_API_KEY')

# Construa o serviço do YouTube
youtube = build('youtube', 'v3', developerKey=api_key)

def get_video_stats(youtube, video_ids):
    chamada = youtube.videos().list(
      part="snippet,statistics",
      id=','.join(video_ids)
    )
    response = chamada.execute()
    result = []
    for item in response.get("items", []):
        video = {
          "id": item["id"],
          "title": item["snippet"]["title"],
          "url": f"https://www.youtube.com/watch?v={item['id']}",
          "publishTime": item['snippet']['publishedAt'],
          "view_count": item["statistics"].get("viewCount"),
          "like_count": item["statistics"].get("likeCount"),
          "comment_count": item["statistics"].get("commentCount"),
          "tags": item['snippet'].get("tags"),
          "source": item
        }
        result.append(video)
    return result

SEARCH_TERM = ' PYTHON and  AULA and PROGRAMAÇÃO and INICIANTE'

# Processe os resultados
video_ids = []
next_page_token = None
counter = 0
print(f"Vídeos encontrados para '{SEARCH_TERM}':")
while counter < 100:
  # https://developers.google.com/youtube/v3/docs/search/list?hl=pt-br
  request = youtube.search().list(
      part='snippet',
      q=SEARCH_TERM,
      type='video',
      order='viewCount',
      publishedAfter='2025-04-01T00:00:00Z',
      relevanceLanguage='pt',
      maxResults=50,
      pageToken=next_page_token
  )
  response = request.execute()
  for item in response['items']:
      video_ids.append(item['id']['videoId'])
      counter += 1
  next_page_token = response.get('nextPageToken')
  if next_page_token:
      print('Buscando nova página')
  else:
      break

print(f"\n{counter} vídeos foram obtidos.")

item

video_ids

len(video_ids)

# A rotina não consegue obter mais do que 50 ids

def get_video_stats(youtube, video_ids):
    chamada = youtube.videos().list(
      part="snippet,statistics",
      id=','.join(video_ids)
    )
    response = chamada.execute()
    result = []
    for item in response.get("items", []):
        video = {
          "id": item["id"],
          "title": item["snippet"]["title"],
          "url": f"https://www.youtube.com/watch?v={item['id']}",
          "publishTime": item['snippet']['publishedAt'],
          "view_count": item["statistics"].get("viewCount"),
          "like_count": item["statistics"].get("likeCount"),
          "comment_count": item["statistics"].get("commentCount"),
          "tags": item['snippet'].get("tags"),
          "source": item
        }
        result.append(video)
    return result

videos = get_video_stats(youtube,video_ids[0:10])

if videos:
  print(videos[0])
else:
  print("No videos found.")

import json

arquivo = open('yotube.json', 'w')
json.dump(videos, arquivo, indent=4)
arquivo.close()

# Rotina 2: Obter os vídeos de um determinado canal
#
# Para obter os vídeos de um determinado canal, é necessário ter o channelID
# que é um parâmetro que NÃO aparece na URL do canal.
#
# Para obter obter o channelID, é necessário buscar primeiro os dados de um dos canais do vídeo
# No retorno das estatísticas, um dos atributos é o channelID
#
video_id = 'DqJnmaLWnqQ'
request = youtube.videos().list(
   part="snippet,statistics",
   id=video_id
)
response = request.execute()
items = response.get("items", [])
if len(items) == 0:
    print('Video não encontrado')
else:
    channel_id = items[0]['snippet']['channelId']

print(channel_id)

# Traz as estatísticas de um determinado canal
def get_channel_stats(youtube, channel_id):
    request = youtube.channels().list(
        part="snippet,contentDetails,statistics",
        id=channel_id
    )
    response = request.execute()

# Obtem os vídeos mais acessados de um determinado canal
#channel_id = 'UCitie-To0pWGe5Qyk9SjWRA'
channel_id = 'UCmGSJVG3mCRXVOP4yZrU1Dw'
max_results = 100

request = youtube.search().list(
    part="id,snippet",
    channelId=channel_id,
    order="viewCount",
    type="video",
    maxResults=max_results
)

response = request.execute()

videos = {}
video_ids = []
for search_result in response.get("items", []):
    if search_result["id"]["kind"] == "youtube#video":
        video_id = search_result["id"]["videoId"]
        videos[video_id] = {
          "title": search_result["snippet"]["title"],
          "url": f"https://www.youtube.com/watch?v={video_id}",
          "publishTime": search_result['snippet']['publishedAt'],
        }
        video_ids.append(video_id)

# Aqui está o pulo do gato para minimizar o número de requests!
request = youtube.videos().list(
   part="snippet,statistics",
   id=','.join(video_ids)
)
response = request.execute()
for item in response.get("items", []):
    videos[item["id"]]['view_count'] = item["statistics"].get("viewCount")
    videos[item["id"]]['like_count'] = item["statistics"].get("likeCount")
    videos[item["id"]]['comment_count'] = item["statistics"].get("commentCount")
    videos[item["id"]]['tags'] = item['snippet'].get("tags")

# Grava os vídeos mais acessados em um arquivo CSV
import csv

# Obtem os vídeos mais acessados de um determinado canal
#channel_id = 'UCitie-To0pWGe5Qyk9SjWRA'
channel_id = 'UCmGSJVG3mCRXVOP4yZrU1Dw'
max_results = 100

request = youtube.search().list(
    part="id,snippet",
    channelId=channel_id,
    order="viewCount",
    type="video",
    maxResults=max_results
)

response = request.execute()

videos = {}
video_ids = []
for search_result in response.get("items", []):
    if search_result["id"]["kind"] == "youtube#video":
        video_id = search_result["id"]["videoId"]
        videos[video_id] = {
          "title": search_result["snippet"]["title"],
          "url": f"https://www.youtube.com/watch?v={video_id}",
          "publishTime": search_result['snippet']['publishedAt'],
        }
        video_ids.append(video_id)

# Aqui está o pulo do gato para minimizar o número de requests!
request = youtube.videos().list(
   part="snippet,statistics",
   id=','.join(video_ids)
)
response = request.execute()
for item in response.get("items", []):
    videos[item["id"]]['view_count'] = item["statistics"].get("viewCount")
    videos[item["id"]]['like_count'] = item["statistics"].get("likeCount")
    videos[item["id"]]['comment_count'] = item["statistics"].get("commentCount")
    videos[item["id"]]['tags'] = item['snippet'].get("tags")


arquivo = open('segundo.csv', 'w')
csv_file = csv.DictWriter(arquivo, fieldnames=['title', 'url', 'publishTime', 'view_count', 'like_count', 'comment_count', 'tags'])
csv_file.writeheader()
for video in videos:
    csv_file.writerow(videos[video])
arquivo.close()

from googleapiclient.discovery import build

# Função para buscar canais relacionados a podcasts
def search_podcast_channels(query, max_results):
    request = youtube.search().list(
        q=query,
        type='channel',
        part='snippet',
        maxResults=max_results
    )
    response = request.execute()

    channels = []
    for item in response['items']:
        channel_id = item['snippet']['channelId']
        channel_title = item['snippet']['title']
        channels.append({'channel_id': channel_id, 'channel_title': channel_title})

    return channels

# Buscando canais de podcast
podcast_channels = search_podcast_channels('conversas', 20)
print(podcast_channels)

# prompt: quais os outros metodos da classe youtube?

print(dir(youtube))

# Buscando canais de podcast brasileiros

def search_podcast_channels(query, max_results, region_code='BR'):
    request = youtube.search().list(
        q=query,
        type='channel',
        part='snippet',
        maxResults=max_results,
        regionCode=region_code  # Adicionando o código de região para o Brasil
    )
    response = request.execute()

    channels = []
    for item in response['items']:
        channel_id = item['snippet']['channelId']
        channel_title = item['snippet']['title']
        channels.append({'channel_id': channel_id, 'channel_title': channel_title})

    return channels

# Buscando canais de tutorial brasileiros
tutorial_channels_brazil = search_podcast_channels('tutorial', 20)
print(tutorial_channels_brazil)

# Obter os dados de acesso de cada canal

# Função para obter o número de inscritos de um canal
def get_channel_subscribers(youtube, channel_id):
    request = youtube.channels().list(
        part="statistics",
        id=channel_id
    )
    response = request.execute()
    items = response.get("items", [])
    if items and "statistics" in items[0] and "subscriberCount" in items[0]["statistics"]:
        return int(items[0]["statistics"]["subscriberCount"])
    return 0

# Adicionar o número de inscritos aos dados dos canais
for channel in tutorial_channels_brazil:
    channel['subscribers'] = get_channel_subscribers(youtube, channel['channel_id'])

# Classificar os canais por número de inscritos
sorted_channels = sorted(tutorial_channels_brazil, key=lambda x: x['subscribers'], reverse=True)

# Selecionar os 10 melhores canais
top_10_channels = sorted_channels[:10]

print(top_10_channels)

# Salvar os detalhes dos canais em um arquivo CSV
import pandas as pd

# Supondo que 'channel_details' seja a lista de dicionários com os detalhes dos canais
df = pd.DataFrame(tutorial_channels_brazil)
df.to_csv('tutorial_tecnologia.csv', index=False)

# Função para buscar canais relacionados a podcasts
query = "podcast"

request = youtube.videos().list(
    part='snippet',
    chart='mostPopular',
    maxResults=10,
   # Quantidade de vídeos que você deseja recuperar
)

response = request.execute()

for item in response['items']:
    print(item['snippet']['title'])

# Função para buscar as categorias do Youtube
query = "aula"

request = youtube.videoCategories().list(
    part='snippet',
    regionCode = 'br'
    )

response = request.execute()

for item in response['items']:
    print(item['id'], item['snippet']['title'])

item
